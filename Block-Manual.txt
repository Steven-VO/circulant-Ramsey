genBlock: generator for block-circulant Ramsey graphs
------------------------------------------------------

This program generates block-circulant Ramsey graphs. These are graphs which are the union of
equally-sized circulant graphs, connected to each other in circulant fashion.
It is designed to do full enumeration with few isomorphic copies.

Author: Steven Van Overberghe


 COMPILATION:
-------------

Tested only for Linux with GNU-compiler.
It is possible that this program does not work properly on 32-bit machines.
Also, the option to process words of size 128 might not be possible on all architectures.

Compile with the 'make'-command.
- 'make block' for default options.
- 'make largeBlock' for graphs up to 128 vertices.
- 'make allBlock' to generate all circulant graphs.

Other compile parameters and combinations can be chosen manually:

 -DSETZISE=64 or 128 (default=64)
       Maximum order of the graphs. Choosing 128 runs slower.

 -DNULCOUNTS=n (default=3)
       Number of consecutive zero-results after which the algorithms stops.

 -DSEARCH_SINGLE=n (default=1)
       If 1, search for current graph order stops after finding 1 graph.
       Setting to 0 will finds all graphs.
       
 -DCHECK_GRAPHS (default 1)
       If 1, verifies correctness of the code by testing all output-graphs for 
       severe errors (based on the clique number). Turning off might increase
       speed, especially when generating all graphs.

Modulo parameters split the work into roughly equal parts:
 -DMODULO_SPLIT=n (default=1)
       If >1, will only try 1/n-th of the branches.
 -DMODULO=k  (default=0)
       Modulo class to be generated.


 CALLING THE PROGRAM:
----------------------

./genBlock <n> <k> <avoid-parameters>

  n: starting graph order

  k: number of blocks. Search is ignored if n is not a multiple of k.

  avoid-parameters: Space-separated sequence of graphs to avoid. The number of 
                    graphs passed is automatically the number of colors used.
     *<n>: Complete graph K_n
     *J<n>: Complete graph with one edge dropped = J_n = K_n-e
     *W<n>: Wheel on n vertices
     *C<n>: Cycle of length n
     *F<n>: Complete graph missing 2 disjoint edges (Kn-2e) (Might be slow)
     *B<n1><n2> Complete bipartite graph on n_1 and n_2 vertices. n1 can be one digit only.


 EXAMPLES
-----------

./genBlock 36 4 J5 J6
Generates block-circulant graphs with 4 equally-sized blocks, starting from 36 vertices, avoiding J5 in the first color
and J6 in the second. This should find the unique such graph in about 0.1 second.

./genBlock 28 4 J4 4 C4
Computes 3-colored graphs, every colour being a block-circulant graph on 4 blocks. There will be no J4 in the first color,
no 4-clique in the second and no cycle of length 4 in the third.

./genBlock 30 1 4 6
Computes 2-coloured block-circulant graphs with one block, i.e. a circulant graph. The output is equivalent
to ./genCyc 30 4 6, but will be somewhat slower.


If you used this progam to find new lower bounds, I would be interested to hear.
